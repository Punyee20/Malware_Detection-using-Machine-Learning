from flask import Flask, render_template, request, redirect, url_for
import joblib
import os

app = Flask(__name__)

import warnings

# Ignore InconsistentVersionWarning
#warnings.filterwarnings("ignore", category=UserWarning, message="Trying to unpickle estimator.*")

# Load the pre-trained random forest model
#model = joblib.load('random_forest_model.joblib')



#Load the pre-trained random forest model
model = joblib.load('random_forest_model_2.joblib')

# Specify the upload folders
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure the upload folder exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Function to check if a file has a .pcap extension
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() == 'pcap'

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/detect_malware', methods=['POST'])
def detect_malware():
    try:
        # Check if a file was submitted
        if 'pcap_file' not in request.files:
            return redirect(url_for('index'))

        file = request.files['pcap_file']

        # Check if the file is allowed
        if file.filename == '':
            return redirect(url_for('index'))

        if file and allowed_file(file.filename):
            # Save the uploaded file to the upload folder
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))

            # Perform feature extraction and make a prediction
            header_size = os.path.getsize(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
            file_size = os.path.getsize(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))

            features = [header_size, file_size]
            prediction = model.predict([features])

            # Display the result
            result = "Malware" if prediction[0] == 1 else "Not Malware"
            return render_template('result.html', result=result)
        else:
            return redirect(url_for('index'))
    except Exception as e:
        return str(e)

if __name__ == '__main__':
    app.run(debug=True)
